# import the Binance client from python-binance module
from binance.client import Client
import time


# define your API key and secret
API_KEY = ""
API_SECRET = ""

# define the client
client = Client (API_KEY, API_SECRET)

# create a variable that will hold the value of USDT in your account
get_usdt_balance = client.get_asset_balance(asset="USDT")
get_btc_balance = client.get_asset_balance(asset="BTC")
orders = client.get_all_orders(symbol='BTCUSDT', limit=1)
info = client.get_account()
avg_price = client.get_avg_price(symbol='BTCUSDT')
get_my_last_trades = client.get_my_trades(symbol='BTCUSDT', limit=1)
prices = client.get_all_tickers()

last_buy_price = float(prices[11]['price'])
last_sell_price = float(prices[11]['price'])
buy_multiplier = 1
sell_multiplier =  1
qty = 0.003
counter = 0

def shift_trade():
    global last_buy_price, last_sell_price, buy_multiplier, sell_multiplier,qty, counter

    get_my_last_trades = client.get_my_trades(symbol='BTCUSDT', limit=1)
    get_usdt_balance = client.get_asset_balance(asset="USDT")
    get_btc_balance = client.get_asset_balance(asset="BTC")
    #avg_price = client.get_avg_price(symbol='BTCUSDT')
    prices = client.get_all_tickers()

    print("-----------------------------------------------")
    print("--------------------------------------")
    print("|  USDT BALANCE     : " + str(get_usdt_balance['free']) )
    print("|  BTC BALANCE      : " + str(get_btc_balance['free']) )
    print("--------------------------------------")
    print(" *  My last price   : " + str(get_my_last_trades[0]['price']))
    print(" *  Market price    : " + str(prices[11]['price']))
    if (get_my_last_trades[0]['isBuyer'] == True):
      print(" *  Last Action     : Buy")
    else:
      print(" *  Last Action     : sell")

    print(" *  Last Buy Price  : " + str(last_buy_price))
    print(" *  Last Sell Price : " + str(last_sell_price))
    print(" *  Buy Multiplier  : " + str(buy_multiplier))
    print(" *  Sell Multiplier : " + str(sell_multiplier))
    print(" *  Error counter   : " + str(counter))
    print("")


    if (float(prices[11]['price'])  >= (float(last_buy_price) + float(sell_multiplier))) \
        and (buy_multiplier > sell_multiplier):

            print("")
            print("Selling 1")
            print("******************************************")
            print("placing order for sell")
            client.order_limit_sell(
              symbol='BTCUSDT',
              quantity=qty,
              price=str(prices[11]['price'])
            )
            last_sell_price = float(prices[11]['price'])
            sell_multiplier += 4
            #if buy_multiplier >= 2:
            buy_multiplier = 1
            counter = 0

            print("******************************************")
            print("current_price : " + str(float(prices[11]['price'])))
            print("last_trade_price : " + str(get_my_last_trades[0]['price']))
            print("is last transaction buy : " + str((get_my_last_trades[0]['isBuyer'])))
        #else:
            #print("------Insufficient Balance------")


    #+ float(sell_multiplier))
    if (float(prices[11]['price'])  >= (float(last_sell_price) + float(sell_multiplier))):
        
            print("")
            print("Selling 2")
            print("******************************************")
            print("placing order for sell")
            client.order_limit_sell(
              symbol='BTCUSDT',
              quantity=qty,
              price=str(prices[11]['price'])
            )
            last_sell_price = float(prices[11]['price'])
            sell_multiplier += 4
            #if buy_multiplier >= 2:
            buy_multiplier = 1
            counter = 0

            print("******************************************")
            print("current_price : " + str(float(prices[11]['price'])))
            print("last_trade_price : " + str(get_my_last_trades[0]['price']))
            print("is last transaction buy : " + str((get_my_last_trades[0]['isBuyer'])))

    if (float(prices[11]['price'])  <= (float(last_sell_price) - float(buy_multiplier))) \
        and (sell_multiplier > buy_multiplier):
       #if float(get_usdt_balance['free']) > 14:
    
          print("")
          print("Buying 1")
          print("******************************************")
          print("placing order for buy")
          
          client.order_limit_buy(
              symbol='BTCUSDT',
              quantity=qty,
              price=str(prices[11]['price'])
            )
          last_buy_price = float(prices[11]['price'])
          buy_multiplier += 4
          #if buy_multiplier >= 2:
          sell_multiplier = 1
          counter = 0
          

          print("******************************************")
          print("current_price : " + str(float(prices[11]['price'])))
          print("last_trade_price : " + str(get_my_last_trades[0]['price']))
          print("is last transaction buy : " + str((get_my_last_trades[0]['isBuyer'])))
          print("")

    

    #- float(buy_multiplier))
    if (float(prices[11]['price'])  <= (float(last_buy_price) - float(buy_multiplier))) :
       #if float(get_usdt_balance['free']) > 14:

          print("")
          print("Buying 2")
          print("******************************************")
          print("placing order for buy")
          
          client.order_limit_buy(
              symbol='BTCUSDT',
              quantity=qty,
              price=str(prices[11]['price'])
            )
          last_buy_price = float(prices[11]['price'])
          buy_multiplier += 4
          #if buy_multiplier >= 2:
          sell_multiplier = 1
          counter = 0
          

          print("******************************************")
          print("current_price : " + str(float(prices[11]['price'])))
          print("last_trade_price : " + str(get_my_last_trades[0]['price']))
          print("is last transaction buy : " + str((get_my_last_trades[0]['isBuyer'])))
          print("")


def cancel_all_order():
  OpenOrder = client.get_open_orders(symbol='BTCUSDT')
  print(orders)

  for pendingOrder in OpenOrder:
    print (pendingOrder['symbol'])
    client.cancel_order(
      symbol='BTCUSDT',
      orderId= pendingOrder['orderId']
    )




def main():
  global last_buy_price, last_sell_price, buy_multiplier, sell_multiplier,qty,counter 
  while True:
    try: 
      print("Scanning...")
      time.sleep(5)
      shift_trade()
      
    except Exception as e:
      print(e)
      counter += 1
      #if "insufficient balance" in str(e):
      if counter == 10:
        print("Insufficient balance... Shifting to new position")
        print("waiting for 10 sec before re-initializing trade values")
        time.sleep(10)
        prices = client.get_all_tickers()
        last_buy_price = float(prices[11]['price'])
        last_sell_price = float(prices[11]['price'])
        buy_multiplier = 1
        sell_multiplier = 1
        counter = 0

        cancel_all_order()


if __name__ == '__main__':
  main()




